"""–†–∞–±–æ—Ç–∞ —Å Telegram API"""

import logging
from aiogram import executor, types
from aiogram.utils.markdown import *
from aiogram.utils.exceptions import *
from aiogram.types import *
import config as cfg
from config import db
import keyboards as kb
import re

import event_handler
import error_handler
from subprocess import call
from datetime import datetime
import pytz
import xls_handler

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)

dp = cfg.dp
bot = cfg.bot


def filter_chat_is_private(msg: types.Message, *_, **__):
    """–§–∏–ª—å—Ç—Ä –ø—Ä–∏–≤–∞—Ç–Ω—ã—Ö —á–∞—Ç–æ–≤."""
    return ChatType.is_private(msg)


async def is_admin(user_id):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞."""
    user_status = db.get_person(user_id=user_id)["is_admin"]
    if user_status:
        return True
    else:
        return False


async def db_execute(msg):
    """–ó–∞–ø—Ä–æ—Å –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö."""
    try:
        msg.reply(text=db.execute(msg.text))
    except Exception as e:
        msg.reply(text="–ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å –∑–∞–ø—Ä–æ—Å.\n__%s__" % e)
        error_handler.add_error_to_log(user=msg.from_user.username, error=e)


def get_time_to_lesson():
    """–ü–æ–ª—É—á–∞–µ–º –≤—Ä–µ–º—è –¥–æ –ø–∞—Ä—ã."""
    now = datetime.now().astimezone(pytz.timezone("Asia/Bangkok"))
    current_time = str(now.hour) + ":" + str(now.minute)
    breaktime: str = "\n\n–°–µ–π—á–∞—Å " + current_time + " | –ü–µ—Ä–µ–º–µ–Ω–∞"

    today8 = now.replace(hour=8, minute=0)
    today930 = now.replace(hour=9, minute=30)
    today950 = now.replace(hour=9, minute=50)
    today1125 = now.replace(hour=11, minute=25)
    today1140 = now.replace(hour=11, minute=40)
    today1315 = now.replace(hour=13, minute=15)
    today1345 = now.replace(hour=13, minute=45)
    today1520 = now.replace(hour=15, minute=20)
    today1535 = now.replace(hour=15, minute=35)
    today1710 = now.replace(hour=17, minute=10)
    today1725 = now.replace(hour=17, minute=25)
    today1855 = now.replace(hour=18, minute=55)

    message = (
        "‚è∞ –í—Ä–µ–º—è –ø–∞—Ä:\n\n"
        "*1 –ø–∞—Ä–∞*     __8:00 - 9:30__\n"
        "*2 –ø–∞—Ä–∞*     __9:50 - 11:25__\n"
        "*3 –ø–∞—Ä–∞*     __11:40 - 13:15__\n"
        "*4 –ø–∞—Ä–∞*     __13:45 - 15:20__\n"
        "*5 –ø–∞—Ä–∞*     __15:35 - 17:10__\n"
        "*6 –ø–∞—Ä–∞*     __17:25 - 18:55__ "
    )
    if now < today8:
        message += "\n\n*–ü–∞—Ä—ã –µ—â–µ –Ω–µ –Ω–∞—á–∞–ª–∏—Å—å*"
    elif today8 <= now <= today930:
        dt = today930 - now
        message += f"\n\n–°–µ–π—á–∞—Å –∏–¥—ë—Ç *1* –ø–∞—Ä–∞, –∫–æ–Ω–µ—Ü —á–µ—Ä–µ–∑ *{dt.seconds // 60}* –º–∏–Ω—É—Ç"
    elif today950 > now > today930:
        message += breaktime
    elif today950 <= now <= today1125:
        dt = today1125 - now
        message += f"\n\n–°–µ–π—á–∞—Å –∏–¥—ë—Ç *2* –ø–∞—Ä–∞, –∫–æ–Ω–µ—Ü —á–µ—Ä–µ–∑ *{dt.seconds // 60}* –º–∏–Ω—É—Ç"
    elif today1125 < now < today1140:
        message += breaktime
    elif today1140 <= now <= today1315:
        dt = today1315 - now
        message += f"\n\n–°–µ–π—á–∞—Å –∏–¥—ë—Ç *3* –ø–∞—Ä–∞, –∫–æ–Ω–µ—Ü —á–µ—Ä–µ–∑ *{dt.seconds // 60}* –º–∏–Ω—É—Ç"
    elif today1315 < now < today1345:
        message += breaktime
    elif today1345 <= now <= today1520:
        dt = today1520 - now
        message += f"\n\n–°–µ–π—á–∞—Å –∏–¥—ë—Ç *4* –ø–∞—Ä–∞, –∫–æ–Ω–µ—Ü —á–µ—Ä–µ–∑ *{dt.seconds // 60}* –º–∏–Ω—É—Ç"
    elif today1520 < now < today1535:
        message += breaktime
    elif today1535 <= now <= today1710:
        dt = today1710 - now
        message += f"\n\n–°–µ–π—á–∞—Å –∏–¥—ë—Ç *5* –ø–∞—Ä–∞, –∫–æ–Ω–µ—Ü —á–µ—Ä–µ–∑ *{dt.seconds // 60}* –º–∏–Ω—É—Ç"
    elif today1710 < now < today1725:
        message += breaktime
    elif today1725 <= now <= today1855:
        dt = today1855 - now
        message += f"\n\n–°–µ–π—á–∞—Å –∏–¥—ë—Ç *6* –ø–∞—Ä–∞, –∫–æ–Ω–µ—Ü —á–µ—Ä–µ–∑ *{dt.seconds // 60}* –º–∏–Ω—É—Ç"
    else:
        message += "\n\n*–ü–∞—Ä—ã –∫–æ–Ω—á–∏–ª–∏—Å—å, –æ—Ç–¥—ã—Ö–∞–π*"
    return message


async def get_course(msg):
    """–°–º–µ–Ω–∞ —ç—Ç–∞–ø–∞ –Ω–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–µ –∫—É—Ä—Å–∞."""
    await msg.edit_text(
        text="*–í—ã–±–µ—Ä–∏—Ç–µ –∫—É—Ä—Å:*", reply_markup=kb.course_keyboard(msg.chat.id),
    )


async def get_group(msg):
    """–°–º–µ–Ω–∞ —ç—Ç–∞–ø–∞ –Ω–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–µ –≥—Ä—É–ø–ø—ã."""
    await msg.edit_text(
        text="*–í—ã–±–µ—Ä–∏—Ç–µ –≥—Ä—É–ø–ø—É:*", reply_markup=kb.group_keyboard(msg.chat.id)
    )


@dp.message_handler(commands=["start"])
async def start_message(msg: types.Message):
    """–°—Ç–∞—Ä—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ."""
    if filter_chat_is_private(msg):
        if db.user_exists(user_id=msg.chat.id):
            await msg.answer(
                text="‚ùó –í—ã *—É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã* –≤ —Å–∏—Å—Ç–µ–º–µ!\n"
                "–ß—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ –º–µ–Ω—é, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É */menu*"
            )

        else:
            db.get_person(msg.chat.id)
            await msg.answer(
                text=f"–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é, *{msg.from_user.first_name}*. –í—ã–±–µ—Ä–∏—Ç–µ —Å–≤–æ—é —Ñ–∞–∫—É–ª—å—Ç–µ—Ç:",
                reply_markup=kb.faculty_menu(),
            )
    else:
        await msg.answer(
            text=f"[{msg.from_user.first_name}](tg://user?id={msg.from_user.id}),"
            f" –±–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –≤ *–ª–∏—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö*."
        )


@dp.message_handler(commands=["menu"])
async def send_message_main_menu(msg: Message):
    """–°–æ–æ–±—â–µ–Ω–∏–µ —Å –æ—Å–Ω–æ–≤–Ω—ã–º –º–µ–Ω—é."""
    if filter_chat_is_private(msg=msg):
        if not db.user_exists(msg.from_user.id):
            await start_message(msg)
        else:
            await msg.answer(text="*–ú–µ–Ω—é:*", reply_markup=kb.main_menu())
    else:
        await msg.answer(
            text=f"[{msg.from_user.first_name}](tg://user?id={msg.from_user.id}),"
            f" –±–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –≤ *–ª–∏—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö*."
        )


@dp.message_handler(commands=["iamadmin"])
async def i_am_admin(msg: Message):
    """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é."""
    if filter_chat_is_private(msg):
        admin_status = db.get_person(user_id=msg.chat.id)["is_admin"]
        if msg.from_user.id in cfg.admin_list and admin_status is False:
            db.execute(
                "UPDATE Users SET is_admin=True where user_id=%s" % msg.from_user.id
            )
            await msg.answer(
                text="–ì—Ä—É–ø–ø–∞ —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–∞! –¢–µ–ø–µ—Ä—å —É –≤–∞—Å –µ—Å—Ç—å –¥–æ—Å—Ç—É–ø –∫ *–ê–¥–º–∏–Ω-–ú–µ–Ω—é* –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö."
            )
        elif admin_status:
            await msg.answer(text="–í—ã —É–∂–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä!")
        else:
            await msg.answer("–í—ã –Ω–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä!")
    else:
        await msg.answer(
            text=f"[{msg.from_user.first_name}](tg://user?id={msg.from_user.id}),"
            f" –±–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –≤ *–ª–∏—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö*.",
            parse_mode="Markdown",
        )


@dp.message_handler(content_types=["text"])
async def processor_messages(msg: Message):
    user_id = msg.chat.id

    if filter_chat_is_private(msg=msg):
        if db.user_exists(user_id=user_id)["exists"]:
            if msg.text == "–£—á—ë–±–∞":
                await msg.answer(
                    text="–ú–µ–Ω—é —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è", reply_markup=kb.get_schedule_by_day(),
                )

            elif msg.text == "–í—Ä–µ–º—è –ø–∞—Ä":
                await msg.answer(
                    text=get_time_to_lesson(), reply_markup=kb.lesson_time()
                )

            elif msg.text == "–î–æ–ø. –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è":
                await msg.answer(text="–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è")

            elif msg.text == "–ù–∞—Å—Ç—Ä–æ–π–∫–∏":
                await msg.answer(
                    text="–ü–∞—Ä–∞–º–µ—Ç—Ä—ã:",
                    reply_markup=kb.make_settings_keyboard_for_user(user_id),
                )

            elif msg.text == "–°–µ–≥–æ–¥–Ω—è":
                await msg.answer("–ü–æ–ª—É—á–∞—é —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ...")
                await bot.send_chat_action(chat_id=user_id, action="typing")
                user_group = db.get_person(user_id=user_id)["group"]
                await msg.answer(
                    text=await xls_handler.get_today_schedule(user_group=user_group)
                )

            elif msg.text == "–ó–∞–≤—Ç—Ä–∞":
                await msg.answer("–ü–æ–ª—É—á–∞—é —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ...")
                await bot.send_chat_action(chat_id=user_id, action="typing")
                user_group = db.get_person(user_id=user_id)["group"]
                await msg.answer(
                    text=await xls_handler.get_tomorrow_schedule(user_group=user_group)
                )

            elif msg.text == "–ù–µ–¥–µ–ª—è":
                await msg.answer(
                    text="–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏:", reply_markup=kb.week_menu()
                )

            elif msg.text == "‚óÄÔ∏è":
                await msg.answer(text="–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", reply_markup=kb.main_menu())

            elif msg.text == "üö™":
                await msg.answer(
                    text="–ü–æ–∏—Å–∫ –∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∞—É–¥–∏—Ç–æ—Ä–∏–π –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ..."
                )

            elif msg.text == "üë¥":
                await msg.answer(
                    text="–ü–æ–∏—Å–∫ –∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–π –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ..."
                )

            elif msg.text == "‚ùì":
                await msg.answer(
                    text="""*–ú–µ–Ω—é —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è - –ü–æ–º–æ—â—å*

_–°–µ–≥–æ–¥–Ω—è_  ‚Üí  —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è
_–ó–∞–≤—Ç—Ä–∞_  ‚Üí  —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –∑–∞–≤—Ç—Ä–∞
_–ù–µ–¥–µ–ª—è_  ‚Üí  —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –≤—Å—é –Ω–µ–¥–µ–ª—é –∏–ª–∏ –æ—Ç–¥–µ–ª—å–Ω—ã–π –¥–µ–Ω—å

üö™  ‚Üí  –ø–æ–∏—Å–∫ –∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∞—É–¥–∏—Ç–æ—Ä–∏–∏
üë¥  ‚Üí  –ø–æ–∏—Å–∫ –∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è

*P.S.* –î–ª—è —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–π —Å–ø—Ä–∞–≤–∫–∏ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é –∏–∫–æ–Ω–∫—É –ø–æ–¥ —Å–æ–æ–±—â–µ–Ω–∏–µ–º""",
                    reply_markup=kb.schedule_menu_help(),
                )

            elif msg.text == "":
                pass
        else:
            await msg.answer(
                "–î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –∫–æ–º–∞–Ω–¥ –≤—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å *–∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã*!\n"
                "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /start —á—Ç–æ–±—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è."
            )
    else:
        await msg.answer(
            text=f"[{msg.from_user.first_name}](tg://user?id={msg.from_user.id}),"
            f" –±–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –≤ *–ª–∏—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö*."()
        )


@dp.callback_query_handler(lambda _call: True)
async def handle_callbacks(_call: CallbackQuery):
    """–û—Ç–ª–∞–≤–ª–∏–≤–∞–µ–º –∫—ç–ª–ª–±—ç–∫–∏ —Ç–µ–ª–µ–≥—Ä–∞–º–∞."""
    chat_id = _call.message.chat.id
    username = _call.from_user.username

    if _call.data == "to_main_menu":
        await _call.message.edit_text(text="*–ú–µ–Ω—é:*", reply_markup=kb.main_menu())
        await _call.answer()

    elif _call.data == "get_lesson_time":
        await _call.message.edit_text(
            text=get_time_to_lesson(), reply_markup=kb.lesson_time(),
        )
        await _call.answer()

    elif _call.data == "audience_help":
        await _call.answer(
            text="üö™ –ê—É–¥–∏—Ç–æ—Ä–∏–∏\n\n–ü–æ–∏—Å–∫ –∞—É–¥–∏—Ç–æ—Ä–∏–∏ –ø–æ –Ω–æ–º–µ—Ä—É –∏–ª–∏ —Ñ—Ä–∞–≥–º–µ–Ω—Ç—É –∏ –≤—ã–≤–æ–¥ –µ—ë —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è, —Å —É—á—ë—Ç–æ–º –∫–æ—Ä–ø—É—Å–∞ –∏ —á–µ—Ç–Ω–æ—Å—Ç–∏ –Ω–µ–¥–µ–ª–∏",
            show_alert=True,
        )

    elif _call.data == "teacher_help":
        await _call.answer(
            text="üë¥ –ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–∏\n\n–ü–æ–∏—Å–∫ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è –ø–æ —Ñ–∞–º–∏–ª–∏–∏ –∏–ª–∏ —Ñ—Ä–∞–≥–º–µ–Ω—Ç—É —Ñ–∞–º–∏–ª–∏–∏ (–∏–∑ –ª—é–±–æ–π —á–∞—Å—Ç–∏ —Å–ª–æ–≤–∞) –∏ –≤—ã–≤–æ–¥ –µ–≥–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è",
            show_alert=True,
        )

    elif _call.data == "open_parameters_menu":
        await _call.message.edit_text(
            text="*–ü–∞—Ä–∞–º–µ—Ç—Ä—ã:*",
            reply_markup=kb.make_settings_keyboard_for_user(chat_id),
        )
        await _call.answer()

    elif _call.data == "personal_settings":
        db_answer = db.get_person(user_id=_chat_id)
        faculty = db_answer["faculty"]
        course = db_answer["course"]
        group = db_answer["group"]
        answer_message = "–í–∞—à–∏ —Ç–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:\n–§–∞–∫—É–ª—å—Ç–µ—Ç: *{0}*\n–ö—É—Ä—Å: *{1}*\n–ì—Ä—É–ø–ø–∞: *{2}*".format(
            faculty, course, text(group)
        )
        await _call.message.edit_text(
            text=answer_message,
            reply_markup=kb.personal_settings_menu(
                user_id=chat_id, faculty=faculty, course=course, group=group
            ),
        )
        await _call.answer()

    elif _call.data == "choose_group":
        await get_group(_call.message)
        await _call.answer()

    elif _call.data == "reload_time":
        try:
            await _call.message.edit_text(
                text=get_time_to_lesson(), reply_markup=kb.lesson_time()
            )
        except MessageNotModified:
            await _call.answer(text="–ù–µ –Ω–∞–∂–∏–º–∞–π—Ç–µ —Ç–∞–∫ —á–∞—Å—Ç–æ!")

    elif _call.data == "change_faculty":
        await _call.message.edit_text(
            text="*–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–∫—É–ª—å—Ç–µ—Ç:*", reply_markup=kb.faculty_menu()
        )
        await _call.answer()

    elif _call.data == "change_course":
        await _call.answer()
        await get_course(_call.message)

    elif _call.data == "MTS_faculty":
        db.change_faculty(chat_id, faculty="–ú–¢–°")
        await _call.answer(text="–§–∞–∫—É–ª—å—Ç–µ—Ç –≤—ã–±—Ä–∞–Ω.")
        await get_course(_call.message)

    elif _call.data == "MRM_faculty":
        db.change_faculty(chat_id, faculty="–ú–†–ú")
        await _call.answer(text="–§–∞–∫—É–ª—å—Ç–µ—Ç –≤—ã–±—Ä–∞–Ω.")
        await get_course(_call.message)

    elif _call.data == "IVT_faculty":
        db.change_faculty(chat_id, faculty="–ò–í–¢")
        await _call.answer(text="–§–∞–∫—É–ª—å—Ç–µ—Ç –≤—ã–±—Ä–∞–Ω.")
        await get_course(_call.message)

    elif _call.data == "GF_faculty":
        db.change_faculty(chat_id, faculty="–ì–§")
        await _call.answer(text="–§–∞–∫—É–ª—å—Ç–µ—Ç –≤—ã–±—Ä–∞–Ω.")
        await get_course(_call.message)

    elif _call.data == "AES_faculty":
        db.change_faculty(chat_id, faculty="–ê–≠–°")
        await _call.answer(text="–§–∞–∫—É–ª—å—Ç–µ—Ç –≤—ã–±—Ä–∞–Ω.")
        await get_course(_call.message)

    elif _call.data == "set_1_course":
        db.change_course(user_id=chat_id, course="1")
        await _call.answer(text="–ö—É—Ä—Å –≤—ã–±—Ä–∞–Ω.")
        await get_group(_call.message)

    elif _call.data == "set_2_course":
        db.change_course(user_id=chat_id, course="2")
        await _call.answer(text="–ö—É—Ä—Å –≤—ã–±—Ä–∞–Ω.")
        await get_group(_call.message)

    elif _call.data == "set_3_course":
        db.change_course(user_id=chat_id, course="3")
        await _call.answer(text="–ö—É—Ä—Å –≤—ã–±—Ä–∞–Ω.")
        await get_group(_call.message)

    elif _call.data == "set_4_course":
        db.change_course(user_id=chat_id, course="4")
        await _call.answer(text="–ö—É—Ä—Å –≤—ã–±—Ä–∞–Ω.")
        await get_group(_call.message)

    elif _call.data == "set_5_course":
        db.change_course(user_id=chat_id, course="5")
        await _call.answer(text="–ö—É—Ä—Å –≤—ã–±—Ä–∞–Ω.")
        await get_group(_call.message)

    elif _call.data == "set_6_course":
        db.change_course(user_id=chat_id, course="6")
        await _call.answer(text="–ö—É—Ä—Å –≤—ã–±—Ä–∞–Ω.")
        await get_group(_call.message)

    elif _call.data == "delete_me":
        await _call.message.edit_text(
            text="–í—ã —É–≤–µ—Ä–µ–Ω—ã? *–ê–∫–∫–∞—É–Ω—Ç –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—é –Ω–µ –ø–æ–¥–ª–µ–∂–∏—Ç!*",
            reply_markup=kb.delete_me_menu(),
        )
        await _call.answer()

    elif _call.data == "delete_me_yes":
        if db.user_exists(chat_id):
            try:
                db.delete_person(chat_id)
                await _call.message.edit_text(
                    text="–ê–∫–∫–∞—É–Ω—Ç –±—ã–ª *—É–¥–∞–ª–µ–Ω!*\n–ß—Ç–æ–±—ã –∑–∞–Ω–æ–≤–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ "
                    "–∫–æ–º–∞–Ω–¥—É /start."
                )
                await event_handler.deleted_user(msg=_call)
            except Exception as e:
                await _call.message.answer(text="–û—à–∏–±–∫–∞! \n %s" % e)
                error_handler.add_error_to_log(user=username, error=e)
            await _call.answer()
        else:
            await _call.message.answer(
                text="*–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã!*\n" "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /start."
            )
            await _call.answer()

    elif _call.data == "generate_admin_keyboard":
        await _call.message.edit_text(
            text="*–ê–¥–º–∏–Ω-–º–µ–Ω—é:*", reply_markup=kb.admin_menu()
        )
        await _call.answer()

    elif _call.data == "adminmenu_delete_string":
        msg = await _call.message.edit_text(text="*–í–≤–µ–¥–∏—Ç–µ –∫–ª—é—á:*")
        try:
            bot.register_next_step_handler(msg, db.delete_person)
            bot.send_message(chat_id=chat_id, text="–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª—ë–Ω!")
            await _call.message.edit_text(
                text="*–ê–¥–º–∏–Ω-–º–µ–Ω—é:*", reply_markup=kb.admin_menu()
            )
        except Exception as e:
            bot.send_message(
                chat_id=chat_id,
                text=f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞!\n–¢–µ–∫—Å—Ç –æ—à–∏–±–∫–∏: {e}",
            )
            error_handler.add_error_to_log(user=username, error=e)
        await _call.answer()

    elif _call.data == "adminmenu_truncate_table":
        try:
            db.execute("TRUNCATE TABLE Users")
            bot.send_message(chat_id=chat_id, text="–ë–∞–∑–∞ —É—Å–ø–µ—à–Ω–æ –æ—á–∏—â–µ–Ω–∞!")
        except Exception as e:
            bot.send_message(
                chat_id=chat_id,
                text=f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞!\n–¢–µ–∫—Å—Ç –æ—à–∏–±–∫–∏: {e}",
            )
            error_handler.add_error_to_log(user=username, error=e)
        await _call.answer()

    elif _call.data == "get_monday_schedule":
        group = db.get_person(user_id=chat_id)["group"]
        try:
            await _call.answer(text="–ü–æ–ª—É—á–∞—é —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ...")
            await bot.send_chat_action(chat_id, action="typing")
            answer_message = await xls_handler.get_certain_day(
                group=group, day=_call.data
            )
            await _call.message.edit_text(
                text=answer_message, reply_markup=kb.week_menu()
            )
            await _call.answer()
        except MessageNotModified:
            await _call.answer(text="–í—ã –≤–∏–¥–∏—Ç–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã–π –¥–µ–Ω—å!")

    elif _call.data == "get_tuesday_schedule":
        group = db.get_person(user_id=chat_id)["group"]
        try:
            await _call.answer(text="–ü–æ–ª—É—á–∞—é —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ...")
            await bot.send_chat_action(chat_id, action="typing")
            answer_message = await xls_handler.get_certain_day(
                group=group, day=_call.data
            )
            await _call.message.edit_text(
                text=answer_message, reply_markup=kb.week_menu()
            )
            await _call.answer()
        except MessageNotModified:
            await _call.answer(text="–í—ã –≤–∏–¥–∏—Ç–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã–π –¥–µ–Ω—å!")

    elif _call.data == "get_wednesday_schedule":
        group = db.get_person(user_id=chat_id)["group"]
        try:
            await _call.answer(text="–ü–æ–ª—É—á–∞—é —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ...")
            await bot.send_chat_action(chat_id, action="typing")
            answer_message = await xls_handler.get_certain_day(
                group=group, day=_call.data
            )
            await _call.message.edit_text(
                text=answer_message, reply_markup=kb.week_menu()
            )
            await _call.answer()
        except MessageNotModified:
            await _call.answer(text="–í—ã –≤–∏–¥–∏—Ç–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã–π –¥–µ–Ω—å!")

    elif _call.data == "get_thursday_schedule":
        group = db.get_person(user_id=chat_id)["group"]
        try:
            await _call.answer(text="–ü–æ–ª—É—á–∞—é —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ...")
            await bot.send_chat_action(chat_id, action="typing")
            answer_message = await xls_handler.get_certain_day(
                group=group, day=_call.data
            )
            await _call.message.edit_text(
                text=answer_message, reply_markup=kb.week_menu()
            )
            await _call.answer()
        except MessageNotModified:
            await _call.answer(text="–í—ã –≤–∏–¥–∏—Ç–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã–π –¥–µ–Ω—å!")

    elif _call.data == "get_friday_schedule":
        group = db.get_person(user_id=chat_id)["group"]
        try:
            await _call.answer(text="–ü–æ–ª—É—á–∞—é —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ...")
            await bot.send_chat_action(chat_id, action="typing")
            answer_message = await xls_handler.get_certain_day(
                group=group, day=_call.data
            )
            await _call.message.edit_text(
                text=answer_message, reply_markup=kb.week_menu()
            )
            await _call.answer()
        except MessageNotModified:
            await _call.answer(text="–í—ã –≤–∏–¥–∏—Ç–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã–π –¥–µ–Ω—å!")

    elif _call.data == "get_saturday_schedule":
        group = db.get_person(user_id=chat_id)["group"]
        try:
            await _call.answer(text="–ü–æ–ª—É—á–∞—é —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ...")
            await bot.send_chat_action(chat_id, action="typing")
            answer_message = await xls_handler.get_certain_day(
                group=group, day=_call.data
            )
            await _call.message.edit_text(
                text=answer_message, reply_markup=kb.week_menu()
            )
            await _call.answer()
        except MessageNotModified:
            await _call.answer(text="–í—ã –≤–∏–¥–∏—Ç–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã–π –¥–µ–Ω—å!")

    elif _call.data == "adminmenu_users_count":
        arr = db.get_user_count()
        answer_message = (
            f"__–í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:__ *{arr['Count_All_Users']}*\n\n"
            f"–ú–¢–°: *{arr['MST_Count']}*\n"
            f"–ú–†–ú: *{arr['MRM_Count']}*\n"
            f"–ò–í–¢: *{arr['IVT_Count']}*\n"
            f"–ê–≠–°: *{arr['AES_Count']}*\n"
            f"–ì–§: *{arr['GF_Count']}*"
        )
        try:
            await _call.message.edit_text(
                text=answer_message, reply_markup=kb.admin_user_count_keyboard()
            )
            await _call.answer()
        except MessageNotModified:
            await _call.answer(text="–ò–∑–º–µ–Ω–µ–Ω–∏–π –Ω–µ—Ç!")

    elif _call.data == "adminmenu_schedule_updates":
        arr = db.get_files_versions()
        answer_message = (
            f"__–í—Å–µ–≥–æ –≥—Ä—É–ø–ø:__ *{arr['Count_All_Groups']}*\n\n"
            f"__–¢–æ–ø –≥—Ä—É–ø–ø:__\n *{arr['Top_Groups']}*"
        )
        try:
            await _call.message.edit_text(
                text=answer_message, reply_markup=kb.admin_user_count_keyboard()
            )
            await _call.answer()
        except MessageNotModified:
            await _call.answer(text="–ò–∑–º–µ–Ω–µ–Ω–∏–π –Ω–µ—Ç!")

    elif _call.data == "get_bot_statistic":
        await _call.message.edit_text(
            text="*–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞*", reply_markup=kb.admin_statistic_menu(),
        )
        await _call.answer()

    elif _call.data == "get_edit_db":
        await _call.message.edit_text(
            text="*–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö*", reply_markup=kb.admin_edit_db_menu()
        )
        await _call.answer()

    elif _call.data == "execute_query":
        msg = bot.send_message(chat_id, text="–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –∑–∞–ø—Ä–æ—Å–∞:")
        bot.register_next_step_handler(msg, db_execute)
        await _call.answer()

    elif _call.data == "additional_info":
        await _call.message.edit_text(
            text="*–î–æ–ø. –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è*", reply_markup=kb.additional_info()
        )

    else:
        group = db.get_person(user_id=chat_id)["group"]
        if not group:
            db.change_group(chat_id, _call.data)
            db.change_registration_date(chat_id)
            await _call.message.answer(text="*–ú–µ–Ω—é:*", reply_markup=kb.main_menu())
            await event_handler.new_user(msg=_call)
            await _call.answer(text="–ì—Ä—É–ø–ø–∞ –≤—ã–±—Ä–∞–Ω–∞.")
        else:
            db.change_group(chat_id, _call.data)
            db_answer = db.get_person(user_id=_chat_id)
            faculty = db_answer["faculty"]
            course = db_answer["course"]
            group = db_answer["group"]
            answer_message = f"–í–∞—à–∏ —Ç–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:\n–§–∞–∫—É–ª—å—Ç–µ—Ç: *{faculty}*\n–ö—É—Ä—Å: *{course}*\n–ì—Ä—É–ø–ø–∞: *{group}*"

            await _call.message.edit_text(
                text=answer_message.replace("-", "-"),
                reply_markup=kb.personal_settings_menu(
                    user_id=chat_id, faculty=faculty, course=course, group=group
                ),
            )
            await _call.answer(text="–ö—É—Ä—Å –∏–∑–º–µ–Ω—ë–Ω.")


if __name__ == "__main__":
    executor.start_polling(dp, skip_updates=True)
