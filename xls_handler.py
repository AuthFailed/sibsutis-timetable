"""–ú–æ–¥—É–ª—å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ç–∞–±–ª–∏—Ü–∞–º–∏."""
import re

from config import db
from datetime import datetime, date
import pytz
from bs4 import BeautifulSoup as Soup
from openpyxl import load_workbook, utils as u
from openpyxl.utils import get_column_letter
import openpyxl.worksheet.worksheet as worksheet
import aiohttp

import group_list as gl

main_link = "https://sibsutis.ru/students/study/–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ xlsx/2019-2020 - 2 –ø–æ–ª—É–≥–æ–¥–∏–µ"


async def get_xls_for_user(user_group) -> worksheet:
    """–í—ã–±—Ä–∞—Ç—å/—Å–∫–∞—á–∞—Ç—å —Ñ–∞–π–ª –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω–æ–π –≥—Ä—É–ø–ø—ã."""
    if user_group in gl.mts_1_course:
        await update_schedule_files(group="–ú–¢–°1–∫")
        wb = load_workbook(filename="./schedule_files/–ú–¢–°1–∫.xlsx")
    elif user_group in gl.mts_2_course:
        await update_schedule_files(group="–ú–¢–°2–∫")
        wb = load_workbook(filename="./schedule_files/–ú–¢–°2–∫.xlsx")
    elif user_group in gl.mts_3_course:
        await update_schedule_files(group="–ú–¢–°3–∫")
        wb = load_workbook(filename="./schedule_files/–ú–¢–°3–∫.xlsx")
    elif user_group in gl.mts_4_course:
        await update_schedule_files(group="–ú–¢–°4–∫")
        wb = load_workbook(filename="./schedule_files/–ú–¢–°4–∫.xlsx")
    elif user_group in gl.mrm_1_course:
        await update_schedule_files(group="–ú–†–ú1–∫")
        wb = load_workbook(filename="./schedule_files/–ú–†–ú1–∫.xlsx")
    elif user_group in gl.mrm_2_course:
        await update_schedule_files(group="–ú–†–ú2–∫")
        wb = load_workbook(filename="./schedule_files/–ú–†–ú2–∫.xlsx")
    elif user_group in gl.mrm_3_course:
        await update_schedule_files(group="–ú–†–ú3–∫")
        wb = load_workbook(filename="./schedule_files/–ú–†–ú3–∫.xlsx")
    elif user_group in gl.mrm_4_course:
        await update_schedule_files(group="–ú–†–ú4–∫")
        wb = load_workbook(filename="./schedule_files/–ú–†–ú4–∫.xlsx")
    elif user_group in gl.ivt_1_course:
        await update_schedule_files(group="–ò–í–¢1–∫")
        wb = load_workbook(filename="./schedule_files/–ò–í–¢1–∫.xlsx")
    elif user_group in gl.ivt_2_course:
        await update_schedule_files(group="–ò–í–¢2–∫")
        wb = load_workbook(filename="./schedule_files/–ò–í–¢2–∫.xlsx")
    elif user_group in gl.ivt_3_course:
        await update_schedule_files(group="–ò–í–¢3–∫")
        wb = load_workbook(filename="./schedule_files/–ò–í–¢3–∫.xlsx")
    elif user_group in gl.ivt_4_course:
        await update_schedule_files(group="–ò–í–¢4–∫")
        wb = load_workbook(filename="./schedule_files/–ò–í–¢4–∫.xlsx")
    elif user_group in gl.gf_1_course:
        await update_schedule_files(group="–ì–§1–∫")
        wb = load_workbook(filename="./schedule_files/–ì–§1–∫.xlsx")
    elif user_group in gl.gf_2_course:
        await update_schedule_files(group="–ì–§2–∫")
        wb = load_workbook(filename="./schedule_files/–ì–§2–∫.xlsx")
    elif user_group in gl.gf_3_course:
        await update_schedule_files(group="–ì–§3–∫")
        wb = load_workbook(filename="./schedule_files/–ì–§3–∫.xlsx")
    elif user_group in gl.gf_4_course:
        await update_schedule_files(group="–ì–§4–∫")
        wb = load_workbook(filename="./schedule_files/–ì–§4–∫.xlsx")
    elif user_group in gl.aes_1_course:
        await update_schedule_files(group="–ê–≠–°1–∫")
        wb = load_workbook(filename="./schedule_files/–ê–≠–°1–∫.xlsx")
    elif user_group in gl.aes_2_course:
        await update_schedule_files(group="–ê–≠–°2–∫")
        wb = load_workbook(filename="./schedule_files/–ê–≠–°2–∫.xlsx")
    elif user_group in gl.aes_3_course:
        await update_schedule_files(group="–ê–≠–°3–∫")
        wb = load_workbook(filename="./schedule_files/–ê–≠–°3–∫.xlsx")
    elif user_group in gl.aes_4_course:
        await update_schedule_files(group="–ê–≠–°4–∫")
        wb = load_workbook(filename="./schedule_files/–ê–≠–°4–∫.xlsx")
    else:
        await update_schedule_files(group="–ê–≠–°5–∫")
        wb = load_workbook(filename="./schedule_files/–ê–≠–°5–∫.xlsx")
    wb = wb.get_sheet_by_name("TDSheet")
    return wb


async def update_schedule_files(group):
    """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —É—Å—Ç–∞—Ä–µ–≤—à–∏—Ö —Ñ–∞–π–ª–æ–≤ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è."""
    async with aiohttp.ClientSession() as session:
        async with session.get(url=main_link,
                               ssl=False) as response:
            assert response.status == 200
            soup = Soup(await response.text(), "html.parser")
            text = soup.find("a", attrs={"class": "element-title",
                                         "data-bx-title": "%s.xlsx" % group})
            parsed_time = text["data-bx-datemodify"]
            download_link = f"https://sibsutis.ru{text['data-bx-download']}"
            result = db.execute(
                query=f"SELECT update_time FROM fs WHERE file_name=\'{group}\'")
            if result != parsed_time:
                db.update_time(file_name=group, update_time=parsed_time)
                async with session.get(download_link, allow_redirects=True, ssl=False) as r:
                    open(file=f'./schedule_files/{group}.xlsx', mode='wb').write(await r.content.read())


async def get_certain_day(group, day):
    week_day = re.search(r"get_(.*?)_", day).group(1)
    if week_day == "monday":
        selected_day = get_weekday(0)
    elif week_day == "tuesday":
        selected_day = get_weekday(1)
    elif week_day == "wednesday":
        selected_day = get_weekday(2)
    elif week_day == "thursday":
        selected_day = get_weekday(3)
    elif week_day == "friday":
        selected_day = get_weekday(4)
    else:
        selected_day = get_weekday(5)

    answer_message = await get_schedule(user_group=group,
                                  day=selected_day)
    return format_message(answer_message)


async def get_today_schedule(user_group):
    """–ü–æ–ª—É—á–∏—Ç—å —Å–µ–≥–æ–¥–Ω—è—à–Ω–µ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ."""
    today = get_weekday(datetime.weekday(
        datetime.now(pytz.timezone('Asia/Bangkok'))))
    try:
        if today[1] != "–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ":
            answer_message = await get_schedule(user_group=user_group,
                                          day=today)
        else:
            answer_message = "*–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ*\n\n–°–µ–≥–æ–¥–Ω—è –≤—ã—Ö–æ–¥–Ω–æ–π! –û—Ç–¥—ã—Ö–∞–π üòä"
        return format_message(answer_message)
    except Exception as e:
        raise(e)


async def get_tomorrow_schedule(user_group) -> str:
    """–ü–æ–ª—É—á–∏—Ç—å –∑–∞–≤—Ç—Ä–∞—à–Ω–µ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ."""
    if datetime.weekday(datetime.now().astimezone(pytz.timezone('Asia/Bangkok'))) + 1 == 7:
        tomorrow = get_weekday(0)
    else:
        tomorrow = get_weekday(datetime.weekday(datetime.now().astimezone(pytz.timezone('Asia/Bangkok'))) + 1)
    if tomorrow[1] != "–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ":
        answer_message = await get_schedule(user_group=user_group,
                                      day=tomorrow)
    else:
        answer_message = "*–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ*\n\n–ó–∞–≤—Ç—Ä–∞ –≤—ã—Ö–æ–¥–Ω–æ–π! –û—Ç–¥—ã—Ö–∞–π üòä"
    return answer_message


async def get_schedule(user_group, day) -> str:
    answer_message = ''
    num_of_lessons = 0

    table = await get_xls_for_user(user_group)

    letter = await get_letter(user_group=user_group,
                        table=table)

    answer_message += "*" + day[1] + "*\n\n"
    for i in range(0, len(day[0])):
        point = letter + str(day[0][i])
        if type(table[point]).__name__ == "MergedCell":
            point = letter + str(table[point].row - 1)
        if table[point].value is not None:
            lesson_time = table["B%s" % (int(table[point].row))].value
            if type(table["B%s" % (int(table[point].row))]).__name__ == "MergedCell":
                lesson_time = table["B%s" % (int(table[point].row) - 1)].value
            info = await get_lesson_by_time(lesson_time=lesson_time, cell=table[point].value)
            answer_message += info[0]
            num_of_lessons += 1
    if len(info):
        answer_message += "\n*{0}* –ø–∞—Ä(—ã). –ü–æ—Å–ª–µ–¥–Ω—è—è –ø–∞—Ä–∞ –∫–æ–Ω—á–∞–µ—Ç—Å—è –≤ *{1}*.".format(num_of_lessons,
                                                                                     info[1][11:-3]
                                                                                     )
    else:
        answer_message += "\n\n–í—ã—Ö–æ–¥–Ω–æ–π! –û—Ç–¥—ã—Ö–∞–π üòä"
    return answer_message


async def get_letter(user_group, table):
    table = table
    letter = ''
    for cellobj in table["C4":"Z4"]:
        for cell in cellobj:
            if user_group == cell.value:
                letter = get_column_letter(u.coordinate_to_tuple(cell.coordinate)[1])
                break
    return letter


async def get_lesson_by_time(lesson_time, cell):
    if lesson_time == "8:00:00 - 9:35:00":
        answer_message = "üïó _1 –ø–∞—Ä–∞ (8:00 ‚Äî 9:35)_\n" + cell + "\n"
        last_lesson_time = lesson_time
    elif lesson_time == "9:50:00 - 11:25:00":
        answer_message = "üïô _2 –ø–∞—Ä–∞ (9:50 ‚Äî 11:25)_\n" + cell + "\n"
        last_lesson_time = lesson_time
    elif lesson_time == "11:40:00 - 13:15:00":
        answer_message = "üï¶ _3 –ø–∞—Ä–∞ (11:40 ‚Äî 13:15)_\n" + cell + "\n"
        last_lesson_time = lesson_time
    elif lesson_time == "13:45:00 - 15:20:00":
        answer_message = "üïú _4 –ø–∞—Ä–∞ (13:45 ‚Äî 15:20)_\n" + cell + "\n"
        last_lesson_time = lesson_time
    elif lesson_time == "15:35:00 - 17:10:00":
        answer_message = "üïû _5 –ø–∞—Ä–∞ (15:35 ‚Äî 17:10)_\n" + cell + "\n"
        last_lesson_time = lesson_time
    elif lesson_time == "17:25:00 - 19:00:00":
        answer_message = "üï† _6 –ø–∞—Ä–∞ (17:25 ‚Äî 19:00)_\n" + cell + "\n"
        last_lesson_time = lesson_time
    else:
        raise Exception("–ù–µ–≤–µ—Ä–Ω–æ–µ –≤—Ä–µ–º—è")
    arr = [answer_message, last_lesson_time]
    return arr


def format_message(text):
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π."""
    text = text.replace("(–õ–µ–∫—Ü–∏–æ–Ω–Ω—ã–µ –∑–∞–Ω—è—Ç–∏—è)", "`(–õ–µ–∫—Ü–∏—è)`") \
        .replace("(–õ–∞–±–æ—Ä–∞—Ç–æ—Ä–Ω—ã–µ —Ä–∞–±–æ—Ç—ã)", "`(–õ–∞–±–æ—Ä–∞—Ç–æ—Ä–Ω–∞—è)`") \
        .replace("(–ü—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ –∑–∞–Ω—è—Ç–∏—è)", "`(–ü—Ä–∞–∫—Ç–∏–∫–∞)`") \
        .replace("(–ó–∞–Ω—è—Ç–∏—è –ø–æ –∏–Ω.—è–∑—É)", "`(–ó–∞–Ω—è—Ç–∏—è –ø–æ –∏–Ω.—è–∑—É)`") \
        .replace("(–ó–∞–Ω—è—Ç–∏—è –ø–æ —Ñ–∏–∑–∏—á–µ—Å–∫–æ–π –∫—É–ª—å—Ç—É—Ä–µ)", "`(–ó–∞–Ω—è—Ç–∏—è –ø–æ —Ñ–∏–∑–∏—á–µ—Å–∫–æ–π –∫—É–ª—å—Ç—É—Ä–µ)`")
    return text


def get_weekday(current_date):
    """–£–∑–Ω–∞—ë–º –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏."""
    tday = []
    if is_week_even():
        if current_date == 0:
            rows = ["5", "7", "9", "11", "13", "15"]
            day_of_week = "–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫"
        elif current_date == 1:
            rows = ["17", "19", "21", "23", "25", "27"]
            day_of_week = "–í—Ç–æ—Ä–Ω–∏–∫"
        elif current_date == 2:
            rows = ["29", "31", "33", "35", "37", "39"]
            day_of_week = "–°—Ä–µ–¥–∞"
        elif current_date == 3:
            rows = ["41", "43", "45", "47", "49", "51"]
            day_of_week = "–ß–µ—Ç–≤–µ—Ä–≥"
        elif current_date == 4:
            rows = ["53", "55", "57", "59", "61", "63"]
            day_of_week = "–ü—è—Ç–Ω–∏—Ü–∞"
        elif current_date == 5:
            rows = ["65", "67", "69", "71", "73", "75"]
            day_of_week = "–°—É–±–±–æ—Ç–∞"
        else:
            rows = []
            day_of_week = "–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ"
    else:
        if current_date == 0:
            rows = ["6", "8", "10", "12", "14", "16"]
            day_of_week = "–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫"
        elif current_date == 1:
            rows = ["18", "20", "22", "24", "26", "28"]
            day_of_week = "–í—Ç–æ—Ä–Ω–∏–∫"
        elif current_date == 2:
            rows = ["30", "32", "34", "36", "38", "40"]
            day_of_week = "–°—Ä–µ–¥–∞"
        elif current_date == 3:
            rows = ["42", "44", "46", "48", "50", "52"]
            day_of_week = "–ß–µ—Ç–≤–µ—Ä–≥"
        elif current_date == 4:
            rows = ["54", "56", "58", "60", "62", "64"]
            day_of_week = "–ü—è—Ç–Ω–∏—Ü–∞"
        elif current_date == 5:
            rows = ["66", "68", "70", "72", "74", "76"]
            day_of_week = "–°—É–±–±–æ—Ç–∞"
        else:
            rows = []
            day_of_week = "–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ"
    for obj in rows, day_of_week:
        tday.append(obj)
    print(tday)
    return tday


def get_week_from_date(date_object):
    """–ü–æ–ª—É—á–∞–µ –Ω–æ–º–µ—Ä —É—á–µ–±–Ω–æ–π –Ω–µ–¥–µ–ª–∏."""
    date_ordinal = date_object.toordinal()
    year = date_object.year
    week = ((date_ordinal - _week1_start_ordinal(year)) // 7) + 1
    if week >= 52 and date_ordinal > + _week1_start_ordinal(year + 1):
        year += 1
        week = 1
    return week - 34


def _week1_start_ordinal(year):
    """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–∞—á–∞–ª–æ –≥–æ–¥–∞ –Ω–∞ 1 —è–Ω–≤–∞—Ä—è."""
    jan1 = date(year, 1, 1)
    jan1_ordinal = jan1.toordinal()
    jan1_weekday = jan1.weekday()
    week1_start_ordinal = jan1_ordinal - ((jan1_weekday + 1) % 7)
    return week1_start_ordinal


def is_week_even():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–µ–¥–µ–ª–∏ –Ω–∞ —á—ë—Ç–Ω–æ—Å—Ç—å."""
    if get_week_from_date(datetime.now()) % 2 != 0:
        return False
    else:
        return True
